//file ReadFile.h

#include <iostream>
#include <list>
#include "Station.h"
#include "Train.h"

class ReadFile{
   private:
      std::string origin_Station;
      std::list<Station> Station_list;
      std::list<Train> Train_list;
   public:
      ReadFile();
      std::list<Station> read_Station();
      std::list<Train> read_Train();
      list<Station> get_list_Station(); //da implementare
      list<Train> get_list_Train(); //da implementare
      //correzione timetable; tolgo orari impossibili(quindi anche stazioni);
};

//file ReadFile.cpp

#include "ReadFile.h"
#include <fstream>

using namespace std;

ReadFile::ReadFile(){
   Station_list = read_Station();
   Train_list = read_Train();
}

list<Station> ReadFile::read_Station(){
   list<Station> temp;
   fstream myfile("line_description.txt,");
   if(myfile.open()){
      myfile >> origin_Station;
      string name;
      int type;
      int distance;
      for (myfile >> name >> type >> distance){
         Station s (name,type,distance);
         Station_list.push_back(s);
      }
   }
   else{
      cout << "Failed to open" << endl;
   }
}

list<Train> ReadFile::read_Train(){
   list<Train> temp;
   string line;
   fstream myfile("timetables.txt")
   if(myfile.open()){
      while(getline(myfile,line)){
         int i=0;
         list<int> temp_list;
         while(i<line.size()){
            string temp="";
            while(isdigit(line[i])){
               char c = line[i];
               str += c;
               i++;
            }
            if (str!=""){
               i++;
            }
            temp_list.push_back(stoi(str));
         }
         int id;
         int verse;
         int type;
         list<int> times {nex(temp_list.begin,3),temp_list.end()};
         Train t (id,verse,type,times);
         Train_list.push_back(t);         
      }
      
   }

}
